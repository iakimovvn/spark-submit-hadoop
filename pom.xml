<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <groupId>ru.yakimovvn</groupId>
  <artifactId>spark-submit-docker</artifactId>
  <version>0.0.1-SNAPSHOT</version>

  <modelVersion>4.0.0</modelVersion>
  <packaging>jar</packaging>

  <properties>
    <hadoop.version>3.1.2</hadoop.version>
    <spark.version>3.1.1</spark.version>
    <hive.version>2.3.7</hive.version>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <java.version>1.8</java.version>
    <scala.version>2.12</scala.version>
    <junit.version>4.13</junit.version>
    <parquet.version>1.11.0</parquet.version>
    <sonar.skip>true</sonar.skip>
    <maven.surefire.plugin.version>2.22.0</maven.surefire.plugin.version>
    <maven.compiler.plugin.version>3.6.2</maven.compiler.plugin.version>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-sql_${scala.version}</artifactId>
      <version>${spark.version}</version>
      <exclusions>
        <exclusion>
          <groupId>log4j</groupId>
          <artifactId>log4j</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.apache.spark</groupId>
      <artifactId>spark-yarn_${scala.version}</artifactId>
      <version>${spark.version}</version>
    </dependency>
  </dependencies>

  <build>
    <plugins>
      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>copy-resources</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/docker</outputDirectory>
              <resources>
                <resource>
                  <directory>src/main/docker</directory>
                  <includes>
                    <include>**/*</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-resources-gw</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/docker/gw</outputDirectory>
              <resources>
                <resource>
                  <directory>../assembly/target/</directory>
                  <includes>
                    <include>*.zip</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-resources-gw-to-tests</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/docker/it_tests</outputDirectory>
              <resources>
                <resource>
                  <directory>../assembly/target</directory>
                  <includes>
                    <include>*.zip</include>
                  </includes>
                </resource>
                <resource>
                  <directory>${project.basedir}/src/main/docker/gw</directory>
                  <includes>
                    <include>datanode/conf/</include>
                  </includes>
                </resource>
                <resource>
                  <directory>${project.basedir}/src/main/docker/gw</directory>
                  <includes>
                    <include>namenode/conf/</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>copy-resources-stubs</id>
            <phase>package</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/docker/stubs</outputDirectory>
              <resources>
                <resource>
                  <directory>../external-systems/smd-api-stub/target</directory>
                  <includes>
                    <include>*.jar</include>
                  </includes>
                </resource>
                <resource>
                  <directory>../external-systems/meta-api/meta-api-stub/target</directory>
                  <includes>
                    <include>*.jar</include>
                  </includes>
                </resource>
                <resource>
                  <directory>../external-systems/sberdata-portal-api-stub/target</directory>
                  <includes>
                    <include>*.jar</include>
                  </includes>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven.compiler.plugin.version}</version>
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
          <excludes>
            <exclude>**/HiveTest.java</exclude>
            <exclude>**/SparkTest.java</exclude>
          </excludes>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <configuration>
          <includeScope>runtime</includeScope>
          <outputDirectory>${project.build.directory}/docker/it_tests/lib/</outputDirectory>
          <overWriteReleases>true</overWriteReleases>
          <overWriteSnapshots>true</overWriteSnapshots>
          <overWriteIfNewer>true</overWriteIfNewer>
        </configuration>
        <executions>
          <execution>
            <id>copy-dependencies</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>copy-dependencies</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <executions>
          <execution>
            <id>default-jar</id>
            <phase>prepare-package</phase>
            <configuration>
              <outputDirectory>${project.build.directory}/docker/it_tests</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven.surefire.plugin.version}</version>
        <dependencies>
          <dependency>
            <groupId>org.apache.maven.surefire</groupId>
            <artifactId>surefire-junit4</artifactId>
            <version>${maven.surefire.plugin.version}</version>
          </dependency>
        </dependencies>
        <configuration>
          <includes>
            <include>**/*.java</include>
          </includes>
          <skipTests>true</skipTests>
        </configuration>
      </plugin>

    </plugins>
  </build>

</project>
